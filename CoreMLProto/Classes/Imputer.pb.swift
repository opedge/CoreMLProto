// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Imputer.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2017, Apple Inc. All rights reserved.
//
// Use of this source code is governed by a BSD-3-clause license that can be
// found in LICENSE.txt or at https://opensource.org/licenses/BSD-3-Clause

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// A transformer that replaces missing values with a default value,
/// such as a statistically-derived value.
///
/// If ``ReplaceValue`` is set, then missing values of that type are
/// replaced with the corresponding value.
///
/// For example: if ``replaceDoubleValue`` is set to ``NaN``
/// and a single ``NaN`` double value is provided as input,
/// then it is replaced by ``imputedDoubleValue``. However
/// if the input is an array of doubles, then any instances
/// of ``NaN`` in the array is replaced with the corresponding
/// value in ``imputedDoubleArray``.
public struct CoreML_Specification_Imputer: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Imputer"

  public var imputedValue: OneOf_ImputedValue? {
    get {return _storage._imputedValue}
    set {_uniqueStorage()._imputedValue = newValue}
  }

  public var imputedDoubleValue: Double {
    get {
      if case .imputedDoubleValue(let v)? = _storage._imputedValue {return v}
      return 0
    }
    set {_uniqueStorage()._imputedValue = .imputedDoubleValue(newValue)}
  }

  public var imputedInt64Value: Int64 {
    get {
      if case .imputedInt64Value(let v)? = _storage._imputedValue {return v}
      return 0
    }
    set {_uniqueStorage()._imputedValue = .imputedInt64Value(newValue)}
  }

  public var imputedStringValue: String {
    get {
      if case .imputedStringValue(let v)? = _storage._imputedValue {return v}
      return String()
    }
    set {_uniqueStorage()._imputedValue = .imputedStringValue(newValue)}
  }

  public var imputedDoubleArray: CoreML_Specification_DoubleVector {
    get {
      if case .imputedDoubleArray(let v)? = _storage._imputedValue {return v}
      return CoreML_Specification_DoubleVector()
    }
    set {_uniqueStorage()._imputedValue = .imputedDoubleArray(newValue)}
  }

  public var imputedInt64Array: CoreML_Specification_Int64Vector {
    get {
      if case .imputedInt64Array(let v)? = _storage._imputedValue {return v}
      return CoreML_Specification_Int64Vector()
    }
    set {_uniqueStorage()._imputedValue = .imputedInt64Array(newValue)}
  }

  public var imputedStringDictionary: CoreML_Specification_StringToDoubleMap {
    get {
      if case .imputedStringDictionary(let v)? = _storage._imputedValue {return v}
      return CoreML_Specification_StringToDoubleMap()
    }
    set {_uniqueStorage()._imputedValue = .imputedStringDictionary(newValue)}
  }

  public var imputedInt64Dictionary: CoreML_Specification_Int64ToDoubleMap {
    get {
      if case .imputedInt64Dictionary(let v)? = _storage._imputedValue {return v}
      return CoreML_Specification_Int64ToDoubleMap()
    }
    set {_uniqueStorage()._imputedValue = .imputedInt64Dictionary(newValue)}
  }

  public var replaceValue: OneOf_ReplaceValue? {
    get {return _storage._replaceValue}
    set {_uniqueStorage()._replaceValue = newValue}
  }

  public var replaceDoubleValue: Double {
    get {
      if case .replaceDoubleValue(let v)? = _storage._replaceValue {return v}
      return 0
    }
    set {_uniqueStorage()._replaceValue = .replaceDoubleValue(newValue)}
  }

  public var replaceInt64Value: Int64 {
    get {
      if case .replaceInt64Value(let v)? = _storage._replaceValue {return v}
      return 0
    }
    set {_uniqueStorage()._replaceValue = .replaceInt64Value(newValue)}
  }

  public var replaceStringValue: String {
    get {
      if case .replaceStringValue(let v)? = _storage._replaceValue {return v}
      return String()
    }
    set {_uniqueStorage()._replaceValue = .replaceStringValue(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_ImputedValue: Equatable {
    case imputedDoubleValue(Double)
    case imputedInt64Value(Int64)
    case imputedStringValue(String)
    case imputedDoubleArray(CoreML_Specification_DoubleVector)
    case imputedInt64Array(CoreML_Specification_Int64Vector)
    case imputedStringDictionary(CoreML_Specification_StringToDoubleMap)
    case imputedInt64Dictionary(CoreML_Specification_Int64ToDoubleMap)

    public static func ==(lhs: CoreML_Specification_Imputer.OneOf_ImputedValue, rhs: CoreML_Specification_Imputer.OneOf_ImputedValue) -> Bool {
      switch (lhs, rhs) {
      case (.imputedDoubleValue(let l), .imputedDoubleValue(let r)): return l == r
      case (.imputedInt64Value(let l), .imputedInt64Value(let r)): return l == r
      case (.imputedStringValue(let l), .imputedStringValue(let r)): return l == r
      case (.imputedDoubleArray(let l), .imputedDoubleArray(let r)): return l == r
      case (.imputedInt64Array(let l), .imputedInt64Array(let r)): return l == r
      case (.imputedStringDictionary(let l), .imputedStringDictionary(let r)): return l == r
      case (.imputedInt64Dictionary(let l), .imputedInt64Dictionary(let r)): return l == r
      default: return false
      }
    }
  }

  public enum OneOf_ReplaceValue: Equatable {
    case replaceDoubleValue(Double)
    case replaceInt64Value(Int64)
    case replaceStringValue(String)

    public static func ==(lhs: CoreML_Specification_Imputer.OneOf_ReplaceValue, rhs: CoreML_Specification_Imputer.OneOf_ReplaceValue) -> Bool {
      switch (lhs, rhs) {
      case (.replaceDoubleValue(let l), .replaceDoubleValue(let r)): return l == r
      case (.replaceInt64Value(let l), .replaceInt64Value(let r)): return l == r
      case (.replaceStringValue(let l), .replaceStringValue(let r)): return l == r
      default: return false
      }
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          if _storage._imputedValue != nil {try decoder.handleConflictingOneOf()}
          var v: Double?
          try decoder.decodeSingularDoubleField(value: &v)
          if let v = v {_storage._imputedValue = .imputedDoubleValue(v)}
        case 2:
          if _storage._imputedValue != nil {try decoder.handleConflictingOneOf()}
          var v: Int64?
          try decoder.decodeSingularInt64Field(value: &v)
          if let v = v {_storage._imputedValue = .imputedInt64Value(v)}
        case 3:
          if _storage._imputedValue != nil {try decoder.handleConflictingOneOf()}
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {_storage._imputedValue = .imputedStringValue(v)}
        case 4:
          var v: CoreML_Specification_DoubleVector?
          if let current = _storage._imputedValue {
            try decoder.handleConflictingOneOf()
            if case .imputedDoubleArray(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._imputedValue = .imputedDoubleArray(v)}
        case 5:
          var v: CoreML_Specification_Int64Vector?
          if let current = _storage._imputedValue {
            try decoder.handleConflictingOneOf()
            if case .imputedInt64Array(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._imputedValue = .imputedInt64Array(v)}
        case 6:
          var v: CoreML_Specification_StringToDoubleMap?
          if let current = _storage._imputedValue {
            try decoder.handleConflictingOneOf()
            if case .imputedStringDictionary(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._imputedValue = .imputedStringDictionary(v)}
        case 7:
          var v: CoreML_Specification_Int64ToDoubleMap?
          if let current = _storage._imputedValue {
            try decoder.handleConflictingOneOf()
            if case .imputedInt64Dictionary(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._imputedValue = .imputedInt64Dictionary(v)}
        case 11:
          if _storage._replaceValue != nil {try decoder.handleConflictingOneOf()}
          var v: Double?
          try decoder.decodeSingularDoubleField(value: &v)
          if let v = v {_storage._replaceValue = .replaceDoubleValue(v)}
        case 12:
          if _storage._replaceValue != nil {try decoder.handleConflictingOneOf()}
          var v: Int64?
          try decoder.decodeSingularInt64Field(value: &v)
          if let v = v {_storage._replaceValue = .replaceInt64Value(v)}
        case 13:
          if _storage._replaceValue != nil {try decoder.handleConflictingOneOf()}
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {_storage._replaceValue = .replaceStringValue(v)}
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._imputedValue {
      case .imputedDoubleValue(let v)?:
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
      case .imputedInt64Value(let v)?:
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
      case .imputedStringValue(let v)?:
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      case .imputedDoubleArray(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case .imputedInt64Array(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      case .imputedStringDictionary(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      case .imputedInt64Dictionary(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      case nil: break
      }
      switch _storage._replaceValue {
      case .replaceDoubleValue(let v)?:
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 11)
      case .replaceInt64Value(let v)?:
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 12)
      case .replaceStringValue(let v)?:
        try visitor.visitSingularStringField(value: v, fieldNumber: 13)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "CoreML.Specification"

extension CoreML_Specification_Imputer: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "imputedDoubleValue"),
    2: .same(proto: "imputedInt64Value"),
    3: .same(proto: "imputedStringValue"),
    4: .same(proto: "imputedDoubleArray"),
    5: .same(proto: "imputedInt64Array"),
    6: .same(proto: "imputedStringDictionary"),
    7: .same(proto: "imputedInt64Dictionary"),
    11: .same(proto: "replaceDoubleValue"),
    12: .same(proto: "replaceInt64Value"),
    13: .same(proto: "replaceStringValue"),
  ]

  fileprivate class _StorageClass {
    var _imputedValue: CoreML_Specification_Imputer.OneOf_ImputedValue?
    var _replaceValue: CoreML_Specification_Imputer.OneOf_ReplaceValue?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _imputedValue = source._imputedValue
      _replaceValue = source._replaceValue
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: CoreML_Specification_Imputer) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._imputedValue != other_storage._imputedValue {return false}
        if _storage._replaceValue != other_storage._replaceValue {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

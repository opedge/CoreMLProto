// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: FeatureVectorizer.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2017, Apple Inc. All rights reserved.
//
// Use of this source code is governed by a BSD-3-clause license that can be
// found in LICENSE.txt or at https://opensource.org/licenses/BSD-3-Clause

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// A FeatureVectorizer puts one or more features into a single array.
///
/// The ordering of features in the output array is determined by
/// ``inputList``.
///
/// ``inputDimensions`` is a zero based index.
public struct CoreML_Specification_FeatureVectorizer: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".FeatureVectorizer"

  public var inputList: [CoreML_Specification_FeatureVectorizer.InputColumn] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct InputColumn: SwiftProtobuf.Message {
    public static let protoMessageName: String = CoreML_Specification_FeatureVectorizer.protoMessageName + ".InputColumn"

    public var inputColumn: String = String()

    public var inputDimensions: UInt64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.inputColumn)
        case 2: try decoder.decodeSingularUInt64Field(value: &self.inputDimensions)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.inputColumn.isEmpty {
        try visitor.visitSingularStringField(value: self.inputColumn, fieldNumber: 1)
      }
      if self.inputDimensions != 0 {
        try visitor.visitSingularUInt64Field(value: self.inputDimensions, fieldNumber: 2)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.inputList)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.inputList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputList, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "CoreML.Specification"

extension CoreML_Specification_FeatureVectorizer: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "inputList"),
  ]

  public func _protobuf_generated_isEqualTo(other: CoreML_Specification_FeatureVectorizer) -> Bool {
    if self.inputList != other.inputList {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension CoreML_Specification_FeatureVectorizer.InputColumn: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "inputColumn"),
    2: .same(proto: "inputDimensions"),
  ]

  public func _protobuf_generated_isEqualTo(other: CoreML_Specification_FeatureVectorizer.InputColumn) -> Bool {
    if self.inputColumn != other.inputColumn {return false}
    if self.inputDimensions != other.inputDimensions {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

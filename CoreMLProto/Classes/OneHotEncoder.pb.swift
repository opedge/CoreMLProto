// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: OneHotEncoder.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2017, Apple Inc. All rights reserved.
//
// Use of this source code is governed by a BSD-3-clause license that can be
// found in LICENSE.txt or at https://opensource.org/licenses/BSD-3-Clause

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// Transforms a categorical feature into an array. The array will be all
/// zeros expect a single entry of one.
///
/// Each categorical value will map to an index, this mapping is given by
/// either the ``stringCategories`` parameter or the ``int64Categories``
/// parameter.
public struct CoreML_Specification_OneHotEncoder: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".OneHotEncoder"

  ///*
  /// Mapping to be used for the encoding. The position of the category in
  /// the below vector determines where the single one entry will be in the
  /// output.
  public var categoryType: OneOf_CategoryType? {
    get {return _storage._categoryType}
    set {_uniqueStorage()._categoryType = newValue}
  }

  public var stringCategories: CoreML_Specification_StringVector {
    get {
      if case .stringCategories(let v)? = _storage._categoryType {return v}
      return CoreML_Specification_StringVector()
    }
    set {_uniqueStorage()._categoryType = .stringCategories(newValue)}
  }

  public var int64Categories: CoreML_Specification_Int64Vector {
    get {
      if case .int64Categories(let v)? = _storage._categoryType {return v}
      return CoreML_Specification_Int64Vector()
    }
    set {_uniqueStorage()._categoryType = .int64Categories(newValue)}
  }

  /// Output can be a dictionary with only one entry, instead of an array.
  public var outputSparse: Bool {
    get {return _storage._outputSparse}
    set {_uniqueStorage()._outputSparse = newValue}
  }

  public var handleUnknown: CoreML_Specification_OneHotEncoder.HandleUnknown {
    get {return _storage._handleUnknown}
    set {_uniqueStorage()._handleUnknown = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  ///*
  /// Mapping to be used for the encoding. The position of the category in
  /// the below vector determines where the single one entry will be in the
  /// output.
  public enum OneOf_CategoryType: Equatable {
    case stringCategories(CoreML_Specification_StringVector)
    case int64Categories(CoreML_Specification_Int64Vector)

    public static func ==(lhs: CoreML_Specification_OneHotEncoder.OneOf_CategoryType, rhs: CoreML_Specification_OneHotEncoder.OneOf_CategoryType) -> Bool {
      switch (lhs, rhs) {
      case (.stringCategories(let l), .stringCategories(let r)): return l == r
      case (.int64Categories(let l), .int64Categories(let r)): return l == r
      default: return false
      }
    }
  }

  public enum HandleUnknown: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case errorOnUnknown // = 0

    /// Output will be all zeros for unknown values.
    case ignoreUnknown // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .errorOnUnknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .errorOnUnknown
      case 1: self = .ignoreUnknown
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .errorOnUnknown: return 0
      case .ignoreUnknown: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: CoreML_Specification_StringVector?
          if let current = _storage._categoryType {
            try decoder.handleConflictingOneOf()
            if case .stringCategories(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._categoryType = .stringCategories(v)}
        case 2:
          var v: CoreML_Specification_Int64Vector?
          if let current = _storage._categoryType {
            try decoder.handleConflictingOneOf()
            if case .int64Categories(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._categoryType = .int64Categories(v)}
        case 10: try decoder.decodeSingularBoolField(value: &_storage._outputSparse)
        case 11: try decoder.decodeSingularEnumField(value: &_storage._handleUnknown)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._categoryType {
      case .stringCategories(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .int64Categories(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case nil: break
      }
      if _storage._outputSparse != false {
        try visitor.visitSingularBoolField(value: _storage._outputSparse, fieldNumber: 10)
      }
      if _storage._handleUnknown != .errorOnUnknown {
        try visitor.visitSingularEnumField(value: _storage._handleUnknown, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "CoreML.Specification"

extension CoreML_Specification_OneHotEncoder: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "stringCategories"),
    2: .same(proto: "int64Categories"),
    10: .same(proto: "outputSparse"),
    11: .same(proto: "handleUnknown"),
  ]

  fileprivate class _StorageClass {
    var _categoryType: CoreML_Specification_OneHotEncoder.OneOf_CategoryType?
    var _outputSparse: Bool = false
    var _handleUnknown: CoreML_Specification_OneHotEncoder.HandleUnknown = .errorOnUnknown

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _categoryType = source._categoryType
      _outputSparse = source._outputSparse
      _handleUnknown = source._handleUnknown
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: CoreML_Specification_OneHotEncoder) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._categoryType != other_storage._categoryType {return false}
        if _storage._outputSparse != other_storage._outputSparse {return false}
        if _storage._handleUnknown != other_storage._handleUnknown {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension CoreML_Specification_OneHotEncoder.HandleUnknown: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ErrorOnUnknown"),
    1: .same(proto: "IgnoreUnknown"),
  ]
}

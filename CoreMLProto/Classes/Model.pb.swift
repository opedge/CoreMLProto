// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Model.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2017, Apple Inc. All rights reserved.
//
// Use of this source code is governed by a BSD-3-clause license that can be
// found in LICENSE.txt or at https://opensource.org/licenses/BSD-3-Clause

//*
// A Core ML model consists of a specification version
// and a model description,
// and can be any one of the following types:
//
// Pipelines
//     - ``PipelineClassifier``
//     - ``PipelineRegressor``
//     - ``Pipeline``
//
// Regressors
//     - ``GLMRegressor``
//     - ``SupportVectorRegressor``
//     - ``TreeEnsembleRegressor``
//     - ``NeuralNetworkRegressor``
//
// Classifiers
//     - ``GLMClassifier``
//     - ``SupportVectorClassifier``
//     - ``TreeEnsembleClassifier``
//     - ``NeuralNetworkClassifier``
//
// Neural Networks
//     - ``NeuralNetwork``
//
// Feature Engineering
//     - ``OneHotEncoder``
//     - ``Imputer``
//     - ``FeatureVectorizer``
//     - ``DictVectorizer``
//     - ``Scaler``
//     - ``CategoricalMapping``
//     - ``Normalizer``
//     - ``ArrayFeatureExtractor``
//
// Simple Mathematical Functions
//     - ``Identity``

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// A pipeline consisting of one or more models.
public struct CoreML_Specification_Pipeline: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Pipeline"

  public var models: [CoreML_Specification_Model] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.models)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.models.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.models, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///*
/// A classifier pipeline.
public struct CoreML_Specification_PipelineClassifier: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".PipelineClassifier"

  public var pipeline: CoreML_Specification_Pipeline {
    get {return _storage._pipeline ?? CoreML_Specification_Pipeline()}
    set {_uniqueStorage()._pipeline = newValue}
  }
  /// Returns true if `pipeline` has been explicitly set.
  public var hasPipeline: Bool {return _storage._pipeline != nil}
  /// Clears the value of `pipeline`. Subsequent reads from it will return its default value.
  public mutating func clearPipeline() {_storage._pipeline = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._pipeline)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._pipeline {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

///*
/// A regressor pipeline.
public struct CoreML_Specification_PipelineRegressor: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".PipelineRegressor"

  public var pipeline: CoreML_Specification_Pipeline {
    get {return _storage._pipeline ?? CoreML_Specification_Pipeline()}
    set {_uniqueStorage()._pipeline = newValue}
  }
  /// Returns true if `pipeline` has been explicitly set.
  public var hasPipeline: Bool {return _storage._pipeline != nil}
  /// Clears the value of `pipeline`. Subsequent reads from it will return its default value.
  public mutating func clearPipeline() {_storage._pipeline = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._pipeline)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._pipeline {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

///*
/// A feature description,
/// consisting of a name, short description, and type.
public struct CoreML_Specification_FeatureDescription: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".FeatureDescription"

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var shortDescription: String {
    get {return _storage._shortDescription}
    set {_uniqueStorage()._shortDescription = newValue}
  }

  public var type: CoreML_Specification_FeatureType {
    get {return _storage._type ?? CoreML_Specification_FeatureType()}
    set {_uniqueStorage()._type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  public mutating func clearType() {_storage._type = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularStringField(value: &_storage._shortDescription)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._type)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if !_storage._shortDescription.isEmpty {
        try visitor.visitSingularStringField(value: _storage._shortDescription, fieldNumber: 2)
      }
      if let v = _storage._type {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

///*
/// Model metadata,
/// consisting of a short description, a version string,
/// an author, a license, and any other user defined
/// key/value meta data.
public struct CoreML_Specification_Metadata: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Metadata"

  public var shortDescription: String = String()

  public var versionString: String = String()

  public var author: String = String()

  public var license: String = String()

  public var userDefined: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.shortDescription)
      case 2: try decoder.decodeSingularStringField(value: &self.versionString)
      case 3: try decoder.decodeSingularStringField(value: &self.author)
      case 4: try decoder.decodeSingularStringField(value: &self.license)
      case 100: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.userDefined)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.shortDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.shortDescription, fieldNumber: 1)
    }
    if !self.versionString.isEmpty {
      try visitor.visitSingularStringField(value: self.versionString, fieldNumber: 2)
    }
    if !self.author.isEmpty {
      try visitor.visitSingularStringField(value: self.author, fieldNumber: 3)
    }
    if !self.license.isEmpty {
      try visitor.visitSingularStringField(value: self.license, fieldNumber: 4)
    }
    if !self.userDefined.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.userDefined, fieldNumber: 100)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///*
/// A description of a model,
/// consisting of descriptions of its input and output features.
/// Both regressor and classifier models require the name of the
/// primary predicted output feature (``predictedFeatureName``).
/// Classifier models can specify the output feature containing
/// probabilities for the predicted classes
/// (``predictedProbabilitiesName``).
public struct CoreML_Specification_ModelDescription: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".ModelDescription"

  public var input: [CoreML_Specification_FeatureDescription] {
    get {return _storage._input}
    set {_uniqueStorage()._input = newValue}
  }

  public var output: [CoreML_Specification_FeatureDescription] {
    get {return _storage._output}
    set {_uniqueStorage()._output = newValue}
  }

  public var predictedFeatureName: String {
    get {return _storage._predictedFeatureName}
    set {_uniqueStorage()._predictedFeatureName = newValue}
  }

  public var predictedProbabilitiesName: String {
    get {return _storage._predictedProbabilitiesName}
    set {_uniqueStorage()._predictedProbabilitiesName = newValue}
  }

  public var metadata: CoreML_Specification_Metadata {
    get {return _storage._metadata ?? CoreML_Specification_Metadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {_storage._metadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._input)
        case 10: try decoder.decodeRepeatedMessageField(value: &_storage._output)
        case 11: try decoder.decodeSingularStringField(value: &_storage._predictedFeatureName)
        case 12: try decoder.decodeSingularStringField(value: &_storage._predictedProbabilitiesName)
        case 100: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._input.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._input, fieldNumber: 1)
      }
      if !_storage._output.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._output, fieldNumber: 10)
      }
      if !_storage._predictedFeatureName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._predictedFeatureName, fieldNumber: 11)
      }
      if !_storage._predictedProbabilitiesName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._predictedProbabilitiesName, fieldNumber: 12)
      }
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

///*
/// A Core ML model,
/// consisting of a specification version,
/// a model description, and a model type.
///
/// Core ML model compatibility is indicated by
/// a monotonically increasing specification version number,
/// which is incremented anytime a backward-incompatible change is made
/// (this is functionally equivalent to the MAJOR version number
/// described by `Semantic Versioning 2.0.0 <http://semver.org/>`_).
/// The Core ML framework in macOS currently supports specification version `1`.
public struct CoreML_Specification_Model: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Model"

  public var specificationVersion: Int32 {
    get {return _storage._specificationVersion}
    set {_uniqueStorage()._specificationVersion = newValue}
  }

  public var description_p: CoreML_Specification_ModelDescription {
    get {return _storage._description_p ?? CoreML_Specification_ModelDescription()}
    set {_uniqueStorage()._description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  public var hasDescription_p: Bool {return _storage._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  public mutating func clearDescription_p() {_storage._description_p = nil}

  /// start at 200 here
  /// model specific parameters:
  public var type: OneOf_Type? {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// pipeline starts at 200
  public var pipelineClassifier: CoreML_Specification_PipelineClassifier {
    get {
      if case .pipelineClassifier(let v)? = _storage._type {return v}
      return CoreML_Specification_PipelineClassifier()
    }
    set {_uniqueStorage()._type = .pipelineClassifier(newValue)}
  }

  public var pipelineRegressor: CoreML_Specification_PipelineRegressor {
    get {
      if case .pipelineRegressor(let v)? = _storage._type {return v}
      return CoreML_Specification_PipelineRegressor()
    }
    set {_uniqueStorage()._type = .pipelineRegressor(newValue)}
  }

  public var pipeline: CoreML_Specification_Pipeline {
    get {
      if case .pipeline(let v)? = _storage._type {return v}
      return CoreML_Specification_Pipeline()
    }
    set {_uniqueStorage()._type = .pipeline(newValue)}
  }

  /// regressors start at 300
  public var glmRegressor: CoreML_Specification_GLMRegressor {
    get {
      if case .glmRegressor(let v)? = _storage._type {return v}
      return CoreML_Specification_GLMRegressor()
    }
    set {_uniqueStorage()._type = .glmRegressor(newValue)}
  }

  public var supportVectorRegressor: CoreML_Specification_SupportVectorRegressor {
    get {
      if case .supportVectorRegressor(let v)? = _storage._type {return v}
      return CoreML_Specification_SupportVectorRegressor()
    }
    set {_uniqueStorage()._type = .supportVectorRegressor(newValue)}
  }

  public var treeEnsembleRegressor: CoreML_Specification_TreeEnsembleRegressor {
    get {
      if case .treeEnsembleRegressor(let v)? = _storage._type {return v}
      return CoreML_Specification_TreeEnsembleRegressor()
    }
    set {_uniqueStorage()._type = .treeEnsembleRegressor(newValue)}
  }

  public var neuralNetworkRegressor: CoreML_Specification_NeuralNetworkRegressor {
    get {
      if case .neuralNetworkRegressor(let v)? = _storage._type {return v}
      return CoreML_Specification_NeuralNetworkRegressor()
    }
    set {_uniqueStorage()._type = .neuralNetworkRegressor(newValue)}
  }

  /// classifiers start at 400
  public var glmClassifier: CoreML_Specification_GLMClassifier {
    get {
      if case .glmClassifier(let v)? = _storage._type {return v}
      return CoreML_Specification_GLMClassifier()
    }
    set {_uniqueStorage()._type = .glmClassifier(newValue)}
  }

  public var supportVectorClassifier: CoreML_Specification_SupportVectorClassifier {
    get {
      if case .supportVectorClassifier(let v)? = _storage._type {return v}
      return CoreML_Specification_SupportVectorClassifier()
    }
    set {_uniqueStorage()._type = .supportVectorClassifier(newValue)}
  }

  public var treeEnsembleClassifier: CoreML_Specification_TreeEnsembleClassifier {
    get {
      if case .treeEnsembleClassifier(let v)? = _storage._type {return v}
      return CoreML_Specification_TreeEnsembleClassifier()
    }
    set {_uniqueStorage()._type = .treeEnsembleClassifier(newValue)}
  }

  public var neuralNetworkClassifier: CoreML_Specification_NeuralNetworkClassifier {
    get {
      if case .neuralNetworkClassifier(let v)? = _storage._type {return v}
      return CoreML_Specification_NeuralNetworkClassifier()
    }
    set {_uniqueStorage()._type = .neuralNetworkClassifier(newValue)}
  }

  /// generic models start at 500
  public var neuralNetwork: CoreML_Specification_NeuralNetwork {
    get {
      if case .neuralNetwork(let v)? = _storage._type {return v}
      return CoreML_Specification_NeuralNetwork()
    }
    set {_uniqueStorage()._type = .neuralNetwork(newValue)}
  }

  /// feature engineering starts at 600
  public var oneHotEncoder: CoreML_Specification_OneHotEncoder {
    get {
      if case .oneHotEncoder(let v)? = _storage._type {return v}
      return CoreML_Specification_OneHotEncoder()
    }
    set {_uniqueStorage()._type = .oneHotEncoder(newValue)}
  }

  public var imputer: CoreML_Specification_Imputer {
    get {
      if case .imputer(let v)? = _storage._type {return v}
      return CoreML_Specification_Imputer()
    }
    set {_uniqueStorage()._type = .imputer(newValue)}
  }

  public var featureVectorizer: CoreML_Specification_FeatureVectorizer {
    get {
      if case .featureVectorizer(let v)? = _storage._type {return v}
      return CoreML_Specification_FeatureVectorizer()
    }
    set {_uniqueStorage()._type = .featureVectorizer(newValue)}
  }

  public var dictVectorizer: CoreML_Specification_DictVectorizer {
    get {
      if case .dictVectorizer(let v)? = _storage._type {return v}
      return CoreML_Specification_DictVectorizer()
    }
    set {_uniqueStorage()._type = .dictVectorizer(newValue)}
  }

  public var scaler: CoreML_Specification_Scaler {
    get {
      if case .scaler(let v)? = _storage._type {return v}
      return CoreML_Specification_Scaler()
    }
    set {_uniqueStorage()._type = .scaler(newValue)}
  }

  public var categoricalMapping: CoreML_Specification_CategoricalMapping {
    get {
      if case .categoricalMapping(let v)? = _storage._type {return v}
      return CoreML_Specification_CategoricalMapping()
    }
    set {_uniqueStorage()._type = .categoricalMapping(newValue)}
  }

  public var normalizer: CoreML_Specification_Normalizer {
    get {
      if case .normalizer(let v)? = _storage._type {return v}
      return CoreML_Specification_Normalizer()
    }
    set {_uniqueStorage()._type = .normalizer(newValue)}
  }

  public var arrayFeatureExtractor: CoreML_Specification_ArrayFeatureExtractor {
    get {
      if case .arrayFeatureExtractor(let v)? = _storage._type {return v}
      return CoreML_Specification_ArrayFeatureExtractor()
    }
    set {_uniqueStorage()._type = .arrayFeatureExtractor(newValue)}
  }

  /// simple mathematical functions used for testing start at 900
  public var identity: CoreML_Specification_Identity {
    get {
      if case .identity(let v)? = _storage._type {return v}
      return CoreML_Specification_Identity()
    }
    set {_uniqueStorage()._type = .identity(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// start at 200 here
  /// model specific parameters:
  public enum OneOf_Type: Equatable {
    /// pipeline starts at 200
    case pipelineClassifier(CoreML_Specification_PipelineClassifier)
    case pipelineRegressor(CoreML_Specification_PipelineRegressor)
    case pipeline(CoreML_Specification_Pipeline)
    /// regressors start at 300
    case glmRegressor(CoreML_Specification_GLMRegressor)
    case supportVectorRegressor(CoreML_Specification_SupportVectorRegressor)
    case treeEnsembleRegressor(CoreML_Specification_TreeEnsembleRegressor)
    case neuralNetworkRegressor(CoreML_Specification_NeuralNetworkRegressor)
    /// classifiers start at 400
    case glmClassifier(CoreML_Specification_GLMClassifier)
    case supportVectorClassifier(CoreML_Specification_SupportVectorClassifier)
    case treeEnsembleClassifier(CoreML_Specification_TreeEnsembleClassifier)
    case neuralNetworkClassifier(CoreML_Specification_NeuralNetworkClassifier)
    /// generic models start at 500
    case neuralNetwork(CoreML_Specification_NeuralNetwork)
    /// feature engineering starts at 600
    case oneHotEncoder(CoreML_Specification_OneHotEncoder)
    case imputer(CoreML_Specification_Imputer)
    case featureVectorizer(CoreML_Specification_FeatureVectorizer)
    case dictVectorizer(CoreML_Specification_DictVectorizer)
    case scaler(CoreML_Specification_Scaler)
    case categoricalMapping(CoreML_Specification_CategoricalMapping)
    case normalizer(CoreML_Specification_Normalizer)
    case arrayFeatureExtractor(CoreML_Specification_ArrayFeatureExtractor)
    /// simple mathematical functions used for testing start at 900
    case identity(CoreML_Specification_Identity)

    public static func ==(lhs: CoreML_Specification_Model.OneOf_Type, rhs: CoreML_Specification_Model.OneOf_Type) -> Bool {
      switch (lhs, rhs) {
      case (.pipelineClassifier(let l), .pipelineClassifier(let r)): return l == r
      case (.pipelineRegressor(let l), .pipelineRegressor(let r)): return l == r
      case (.pipeline(let l), .pipeline(let r)): return l == r
      case (.glmRegressor(let l), .glmRegressor(let r)): return l == r
      case (.supportVectorRegressor(let l), .supportVectorRegressor(let r)): return l == r
      case (.treeEnsembleRegressor(let l), .treeEnsembleRegressor(let r)): return l == r
      case (.neuralNetworkRegressor(let l), .neuralNetworkRegressor(let r)): return l == r
      case (.glmClassifier(let l), .glmClassifier(let r)): return l == r
      case (.supportVectorClassifier(let l), .supportVectorClassifier(let r)): return l == r
      case (.treeEnsembleClassifier(let l), .treeEnsembleClassifier(let r)): return l == r
      case (.neuralNetworkClassifier(let l), .neuralNetworkClassifier(let r)): return l == r
      case (.neuralNetwork(let l), .neuralNetwork(let r)): return l == r
      case (.oneHotEncoder(let l), .oneHotEncoder(let r)): return l == r
      case (.imputer(let l), .imputer(let r)): return l == r
      case (.featureVectorizer(let l), .featureVectorizer(let r)): return l == r
      case (.dictVectorizer(let l), .dictVectorizer(let r)): return l == r
      case (.scaler(let l), .scaler(let r)): return l == r
      case (.categoricalMapping(let l), .categoricalMapping(let r)): return l == r
      case (.normalizer(let l), .normalizer(let r)): return l == r
      case (.arrayFeatureExtractor(let l), .arrayFeatureExtractor(let r)): return l == r
      case (.identity(let l), .identity(let r)): return l == r
      default: return false
      }
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._specificationVersion)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._description_p)
        case 200:
          var v: CoreML_Specification_PipelineClassifier?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .pipelineClassifier(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .pipelineClassifier(v)}
        case 201:
          var v: CoreML_Specification_PipelineRegressor?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .pipelineRegressor(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .pipelineRegressor(v)}
        case 202:
          var v: CoreML_Specification_Pipeline?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .pipeline(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .pipeline(v)}
        case 300:
          var v: CoreML_Specification_GLMRegressor?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .glmRegressor(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .glmRegressor(v)}
        case 301:
          var v: CoreML_Specification_SupportVectorRegressor?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .supportVectorRegressor(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .supportVectorRegressor(v)}
        case 302:
          var v: CoreML_Specification_TreeEnsembleRegressor?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .treeEnsembleRegressor(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .treeEnsembleRegressor(v)}
        case 303:
          var v: CoreML_Specification_NeuralNetworkRegressor?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .neuralNetworkRegressor(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .neuralNetworkRegressor(v)}
        case 400:
          var v: CoreML_Specification_GLMClassifier?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .glmClassifier(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .glmClassifier(v)}
        case 401:
          var v: CoreML_Specification_SupportVectorClassifier?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .supportVectorClassifier(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .supportVectorClassifier(v)}
        case 402:
          var v: CoreML_Specification_TreeEnsembleClassifier?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .treeEnsembleClassifier(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .treeEnsembleClassifier(v)}
        case 403:
          var v: CoreML_Specification_NeuralNetworkClassifier?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .neuralNetworkClassifier(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .neuralNetworkClassifier(v)}
        case 500:
          var v: CoreML_Specification_NeuralNetwork?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .neuralNetwork(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .neuralNetwork(v)}
        case 600:
          var v: CoreML_Specification_OneHotEncoder?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .oneHotEncoder(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .oneHotEncoder(v)}
        case 601:
          var v: CoreML_Specification_Imputer?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .imputer(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .imputer(v)}
        case 602:
          var v: CoreML_Specification_FeatureVectorizer?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .featureVectorizer(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .featureVectorizer(v)}
        case 603:
          var v: CoreML_Specification_DictVectorizer?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .dictVectorizer(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .dictVectorizer(v)}
        case 604:
          var v: CoreML_Specification_Scaler?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .scaler(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .scaler(v)}
        case 606:
          var v: CoreML_Specification_CategoricalMapping?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .categoricalMapping(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .categoricalMapping(v)}
        case 607:
          var v: CoreML_Specification_Normalizer?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .normalizer(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .normalizer(v)}
        case 609:
          var v: CoreML_Specification_ArrayFeatureExtractor?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .arrayFeatureExtractor(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .arrayFeatureExtractor(v)}
        case 900:
          var v: CoreML_Specification_Identity?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .identity(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .identity(v)}
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._specificationVersion != 0 {
        try visitor.visitSingularInt32Field(value: _storage._specificationVersion, fieldNumber: 1)
      }
      if let v = _storage._description_p {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      switch _storage._type {
      case .pipelineClassifier(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 200)
      case .pipelineRegressor(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 201)
      case .pipeline(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 202)
      case .glmRegressor(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 300)
      case .supportVectorRegressor(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 301)
      case .treeEnsembleRegressor(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 302)
      case .neuralNetworkRegressor(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 303)
      case .glmClassifier(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 400)
      case .supportVectorClassifier(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 401)
      case .treeEnsembleClassifier(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 402)
      case .neuralNetworkClassifier(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 403)
      case .neuralNetwork(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 500)
      case .oneHotEncoder(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 600)
      case .imputer(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 601)
      case .featureVectorizer(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 602)
      case .dictVectorizer(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 603)
      case .scaler(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 604)
      case .categoricalMapping(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 606)
      case .normalizer(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 607)
      case .arrayFeatureExtractor(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 609)
      case .identity(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 900)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "CoreML.Specification"

extension CoreML_Specification_Pipeline: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "models"),
  ]

  public func _protobuf_generated_isEqualTo(other: CoreML_Specification_Pipeline) -> Bool {
    if self.models != other.models {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension CoreML_Specification_PipelineClassifier: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pipeline"),
  ]

  fileprivate class _StorageClass {
    var _pipeline: CoreML_Specification_Pipeline? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _pipeline = source._pipeline
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: CoreML_Specification_PipelineClassifier) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._pipeline != other_storage._pipeline {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension CoreML_Specification_PipelineRegressor: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pipeline"),
  ]

  fileprivate class _StorageClass {
    var _pipeline: CoreML_Specification_Pipeline? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _pipeline = source._pipeline
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: CoreML_Specification_PipelineRegressor) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._pipeline != other_storage._pipeline {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension CoreML_Specification_FeatureDescription: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "shortDescription"),
    3: .same(proto: "type"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _shortDescription: String = String()
    var _type: CoreML_Specification_FeatureType? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _shortDescription = source._shortDescription
      _type = source._type
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: CoreML_Specification_FeatureDescription) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._name != other_storage._name {return false}
        if _storage._shortDescription != other_storage._shortDescription {return false}
        if _storage._type != other_storage._type {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension CoreML_Specification_Metadata: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "shortDescription"),
    2: .same(proto: "versionString"),
    3: .same(proto: "author"),
    4: .same(proto: "license"),
    100: .same(proto: "userDefined"),
  ]

  public func _protobuf_generated_isEqualTo(other: CoreML_Specification_Metadata) -> Bool {
    if self.shortDescription != other.shortDescription {return false}
    if self.versionString != other.versionString {return false}
    if self.author != other.author {return false}
    if self.license != other.license {return false}
    if self.userDefined != other.userDefined {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension CoreML_Specification_ModelDescription: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "input"),
    10: .same(proto: "output"),
    11: .same(proto: "predictedFeatureName"),
    12: .same(proto: "predictedProbabilitiesName"),
    100: .same(proto: "metadata"),
  ]

  fileprivate class _StorageClass {
    var _input: [CoreML_Specification_FeatureDescription] = []
    var _output: [CoreML_Specification_FeatureDescription] = []
    var _predictedFeatureName: String = String()
    var _predictedProbabilitiesName: String = String()
    var _metadata: CoreML_Specification_Metadata? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _input = source._input
      _output = source._output
      _predictedFeatureName = source._predictedFeatureName
      _predictedProbabilitiesName = source._predictedProbabilitiesName
      _metadata = source._metadata
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: CoreML_Specification_ModelDescription) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._input != other_storage._input {return false}
        if _storage._output != other_storage._output {return false}
        if _storage._predictedFeatureName != other_storage._predictedFeatureName {return false}
        if _storage._predictedProbabilitiesName != other_storage._predictedProbabilitiesName {return false}
        if _storage._metadata != other_storage._metadata {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension CoreML_Specification_Model: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "specificationVersion"),
    2: .same(proto: "description"),
    200: .same(proto: "pipelineClassifier"),
    201: .same(proto: "pipelineRegressor"),
    202: .same(proto: "pipeline"),
    300: .same(proto: "glmRegressor"),
    301: .same(proto: "supportVectorRegressor"),
    302: .same(proto: "treeEnsembleRegressor"),
    303: .same(proto: "neuralNetworkRegressor"),
    400: .same(proto: "glmClassifier"),
    401: .same(proto: "supportVectorClassifier"),
    402: .same(proto: "treeEnsembleClassifier"),
    403: .same(proto: "neuralNetworkClassifier"),
    500: .same(proto: "neuralNetwork"),
    600: .same(proto: "oneHotEncoder"),
    601: .same(proto: "imputer"),
    602: .same(proto: "featureVectorizer"),
    603: .same(proto: "dictVectorizer"),
    604: .same(proto: "scaler"),
    606: .same(proto: "categoricalMapping"),
    607: .same(proto: "normalizer"),
    609: .same(proto: "arrayFeatureExtractor"),
    900: .same(proto: "identity"),
  ]

  fileprivate class _StorageClass {
    var _specificationVersion: Int32 = 0
    var _description_p: CoreML_Specification_ModelDescription? = nil
    var _type: CoreML_Specification_Model.OneOf_Type?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _specificationVersion = source._specificationVersion
      _description_p = source._description_p
      _type = source._type
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: CoreML_Specification_Model) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._specificationVersion != other_storage._specificationVersion {return false}
        if _storage._description_p != other_storage._description_p {return false}
        if _storage._type != other_storage._type {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
